<%# @h_runs.to_json %>
<%#  @log2 %>
<%# raw @log %>
<%# session[:input_data_attrs].to_json %>
<%# @h_unavailable_inputs.to_json %>
<%# raw @h_available_inputs[attr_name][:h_runs].keys %>

<% ida = session[:input_data_attrs][@project.id] %>
<% if attr_name %>
<button id='select_<%= attr_name %>_btn' type='button' class='btn btn-primary select_input_data-btn' <%= 'disabled' if @h_unavailable_inputs and @h_unavailable_inputs[attr_name]  %>>Select</button>

<% if @h_unavailable_inputs and unavailable_attr = @h_unavailable_inputs[attr_name] and @h_unavailable_inputs[attr_name][:h_runs] and unavailable_attr[:valid_step_ids] %>
 <div class='alert alert-danger mt-4' style='width:100%'>
   <p>  No existing dataset comply with these conditions:</p>
   <ul id='list_valid_types_<%= attr_name %>'></ul>
 </div>
<% else %>
 <%# ida = session[:input_data_attrs][@project.id] %>
 <%# if session[:input_data_attrs][@project.id] and session[:input_data_attrs][@project.id][@step.id.to_s] and session[:input_data_attrs][@project.id][@step.id.to_s][attr_name] %>
 <div class='input_data_attrs'>
  <% if ida and ida[@step.id.to_s] and ida[@step.id.to_s][attr_name] and ida[@step.id.to_s][attr_name].size > 0 %>
   <span class='nber_runs'><%= ida[@step.id.to_s][attr_name].size %></span> dataset<%= (ida[@step.id.to_s][attr_name].size > 1) ? "s" : "" %> selected
   <% form_attr_name = "attrs[" + attr_name + "]" %>
   <%= hidden_field_tag  form_attr_name, ida[@step.id.to_s][attr_name].to_json %>
          
   <% if @step.name == 'ge' %>
   <div class='form-inline mb-2'>
     <div class='float-right mr-2 ml-2'>
       FDR <=
	      </div>
     <%= (analyzable? @project) ? text_field_tag('attrs[fdr_cutoff]', session[:tmp_de_filter][@project.id]["fdr_cutoff"], {:size => 5, :class => 'form-control form-de-filter'}) : @h_de_filter['fdr_cutoff'] %>
	 <div class='float-right mr-2 ml-2'>Fold change >=</div>
	 <%= (analyzable? @project) ? text_field_tag('attrs[fc_cutoff]', session[:tmp_de_filter][@project.id]["fc_cutoff"], {:size => 5, :class => 'form-control form-de-filter'}) : session['fc_cutoff'] %>
	 <% if analyzable? @project %>
         <div id='filter_btn2' class='btn btn-primary ml-2'>Filter</div>
	 <% end %>
     </div>
     <div id='ge_filtered_de_results' class='gene_set_filter_results'>       
       <%# render :partial => 'ge_filtered_de', :locals => {:attr_name => attr_name} %>
     </div>
   <% end %>
     
  <% else %>
   <% if !attr['optional'] %> 
    <span class='badge badge-danger'>Please select <%= (attr['req_data_structure'] and attr['req_data_structure'] == 'array' and attr['max_nber_items'] == 1) ? 'one' :  ((!attr['max_nber_items']) ? 'one or several' : "1 to #{attr['max_nber_item']}") %></span>
   <% end %>
  <% end %>
</div>
<% end %>

<%= javascript_tag do %>

 function fill_dropdown(d, h_cats, default_val, add_complementary, type){
  d.empty()
  if (add_complementary){
   d.append($("<option />").val("").text("Complementary"))
  }
  h_cat_keys = Object.keys(h_cats)
   h_cat_keys = h_cat_keys.sort()
  for (var i=0; i<h_cat_keys.length;i++){
  k = h_cat_keys[i]
  v = h_cats[k]
//  $.each(h_cats, function(k, v) {
   console.log([k, v])
//   if (k != ''){
    d.append($("<option />").val(k).text(k + " (" + v + ((type=='cell') ? " cells)" : " genes)")));
//   }
//  });
}
  d.val(default_val || h_cat_keys[0])
 }


$("#select_<%= attr_name %>_btn").click(function(){
refresh("form_container", "<%= form_select_input_data_projects_path(:key => @project.key, :step_id => @step.id, :attr_name => attr_name) %>&obj_id=" + $('#req_std_method_id').val(), {loading : 'fa-2x'})
$("#ontop_window").removeClass("hidden")
})

<% if unavailable_attr and unavailable_attr[:valid_step_ids] and unavailable_attr[:valid_step_ids].size == 0 %>
//alert("<%= raw unavailable_attr.to_json %>");
var list_valid_types = <%= raw attr['valid_types'].to_json %>
for (i= 0; i< list_valid_types.length; i++){
 var list_text = []
 for (j= 0; j< list_valid_types[i].length; j++){
   list_text.push((h_types[list_valid_types[i][j]]) ? h_types[list_valid_types[i][j]].description : '-')
  }
 $("#list_valid_types_<%= attr_name %>").append("<li>" + list_text.join(" OR ") + "</li>")
}
<% end %>


<% if attr_name == 'groups' and session[:input_data_attrs][@project.id][@step.id.to_s] and session[:input_data_attrs][@project.id][@step.id.to_s][attr_name] %>
 <% if h = session[:input_data_attrs][@project.id][@step.id.to_s][attr_name].first %>
//  alert("<%# raw  h[:output_dataset] %>")
 <% group_annot = nil 
  if h[:annot_id]
   group_annot = Annot.where(:project_id => @project.id, :id => h[:annot_id]).first 
  else
   group_annot = Annot.where(:project_id => @project.id, :name => h[:output_dataset]).first 
  end
  %>
 <%# group_annot2 = Annot.where(:project_id => @project.id, :name => session[:input_data_attrs][@project.id][@step.id.to_s]['group_annot2'][:output_dataset]).first %>
 <% if group_annot %>
  console.log("group_annot =")
  console.log(<%= raw group_annot.to_json %>)
  var annot_categories = <%= raw (group_annot and group_annot.categories_json) ? group_annot.categories_json : [] %>
  if (annot_categories['']){ delete annot_categories['']}  
 //var list_annot = Object.keys(tmp_annot_categories).filter(x => x != '')
  
  var list_annot = []
  $.each(annot_categories, function(k, v){list_annot.push(k)});
  <%# if h2 = session[:input_data_attrs][@project.id][@step.id.to_s]['group_annot2'].first and group_annot2 = Annot.where(:project_id => @project.id, :name => h2[:output_dataset]).first %>
/*      var annot_categories2 = <%# raw group_annot2.categories_json %> 
      var list_annot2 = []
      $.each(annot_categories2, function(k, v){ list_annot2.push(k)}); */
  <%# else %>
   var annot_categories2 = annot_categories
   var list_annot2 = list_annot 
  <%# end %>
//var $dropdown = $("#attrs_group_comp");
fill_dropdown($("#attrs_group_ref"), annot_categories, list_annot[0], false, 'cell');
fill_dropdown($("#attrs_group_comp"), annot_categories2, list_annot2[1], true, 'cell');

  <% end %>
 <% end %>
<% elsif ida[@step.id.to_s] and ida[@step.id.to_s][attr_name] and  h = ida[@step.id.to_s][attr_name].first and  @h_attrs[attr_name + "_sel"] %>
 <% group_annot = nil
  if h[:annot_id]
   group_annot = Annot.where(:project_id => @project.id, :id => h[:annot_id]).first
  else
   group_annot = Annot.where(:project_id => @project.id, :name => h[:output_dataset]).first
  end
  %>
  <% if group_annot %>
  var annot_categories = <%= raw (group_annot and group_annot.categories_json) ? group_annot.categories_json : [] %>
  if (annot_categories['']){ delete annot_categories['']}
  fill_dropdown($("#attrs_<%= attr_name %>_sel"), annot_categories, null, false, 'gene')
  <% end %>
<% end %> 

<% if action_name == 'set_input_data' %>
 <%# reset dependent attributes %>
 <% @dependent_attributes.each do |attr_name| %>
  refresh("form-container_<%= attr_name %>", '<%= set_input_data_project_path(:key => @project.key) %>?attr_name=<%= attr_name %>&step_id=<%= @step.id %>&obj_id=<%= params[:obj_id] %>&list_attrs=', {loading:'fa-2x'})
 <% end %>

// update prediction
 <% if attr_name == 'input_matrix' %> // to be changed later : using trigger_upd_pred
  upd_pred('<%= session[:input_data_attrs][@project.id][@step.id.to_s][attr_name].map{|e| e[:annot_id]}.join(",") %>')
// refresh(null, '<%= upd_pred_project_path(:key => @project.key) %>?annot_ids=<%= session[:input_data_attrs][@project.id][@step.id.to_s][attr_name].map{|e| e[:annot_id]}.join(",") %>&std_method_id=' + $("#req_std_method_id").val(), {})  
 <% end %>
<% end %>

<% if @step.name == 'ge' %>
 $("#filter_btn2").click(function(){
 $(this).attr('disabled', 'disabled');
 p = [
  {'name' : 'type', 'value' : 'ge_form'},
  {'name' : 'attr_name', 'value' : '<%= attr_name %>'},
  {'name' : 'step_id', 'value' : '<%= @step.id %>'},
  {'name' : 'filter[fc_cutoff]', 'value' : $("#attrs_fc_cutoff").val()},
  {'name' : 'filter[fdr_cutoff]', 'value' : $("#attrs_fdr_cutoff").val()}
 ];
  refresh_post("ge_filtered_de_results", "<%= filter_de_results_project_path(:key => @project.key) %>", p, 'post', {loading:'fa-2x'});
});
 $("#filter_btn2").click()
<% end %>

<% end %>

<% end %>
