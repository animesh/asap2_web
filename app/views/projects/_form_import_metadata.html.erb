<h4>Import metadata</h4>

<%# raw @error.to_json %>

<%# raw @h_json.to_json %>

<% delimiters = ['Carriage return', 'Tabulation', 'Space', 'Semicolon', 'Comma'] %>
<% delimiter_values = ["\n", "\t", " ", ";", ","] %>
<div class='row'>

  <div class='form-group col-sm-2'>
    <%= label_tag 'annot_type', 'Type', {'data-toggle' => "tooltip"} %>
    <!--    <%# f.select :annot_type, options_for_select(l) {:class => "form-control is-invalid", :placeholder => "Metadata type"} %>-->
    <div id='metadata_type_div'>
      <div class="btn-group" role="group" aria-label="Annotation type">
	<button id='metadata_type_1_btn' type="button" class="btn btn-primary metadata_type_btn active">Cell</button>
	<button id='metadata_type_2_btn' type="button" class="btn btn-secondary metadata_type_btn">Gene</button>
      </div>
    </div>
    
  </div>

  <%= hidden_field_tag 'opt[metadata_type_id]', 1 %>

  <div id='delimiter_form-group' class='form-group col-sm-2'>
    <%= label_tag 'delimiter', 'Delimiter', {'data-toggle' => "tooltip"} %>
    <!--    <%# f.select :annot_type, options_for_select(l) {:class => "form-control is-invalid", :placeholder => "Metadata type"} %>-->
    <div id='delimiter_div'>
      <% l = (0 .. delimiters.size-1).map{|i| [delimiters[i], i]} %>
      <%= select_tag 'opt[delimiter]', options_for_select(l, 0), {class: 'form-control'}  %>
    </div>

  </div>

  <div class='form-group col-sm-3'>
    <%= label_tag 'input_type', "Format" %>
     <div id='input_type_div'>
      <div class="btn-group" role="group" aria-label="Input type">
        <button id='input_type_1_btn' type="button" class="btn btn-primary input_type_btn active">List</button>
        <button id='input_type_2_btn' type="button" class="btn btn-secondary input_type_btn">Matrix</button>
      </div>
    </div>
<!--    <%# l = [['1', 'Annotation matrix'], ['2', 'List']] %>
    <%# f.select :organism_id, grouped_options_for_select(l), {}, {class: 'form-control', divider: '---------'} %> -->
  </div>

  <%= hidden_field_tag 'opt[input_type_id]', 1 %>
  <%= hidden_field_tag 'opt[version_id]', @project.version_id %>
  <div class='form-group col-sm-5'>

    <%= label_tag 'input_method', "Input method" %>
    <div id='input_method_div'>
      <div class="btn-group" role="group" aria-label="Input">
	<button id='input_method_1_btn' type="button" class="btn btn-primary input_method_btn active">Copy-paste</button>
	<button id='input_method_2_btn' type="button" class="btn btn-secondary input_method_btn">Upload file / Send URL</button>
      </div>
    </div> 
  </div>
  
  <%= hidden_field_tag 'opt[input_method_id]', 1 %>
  <%# hidden_field_tag 'project_key', @project.key %>  
</div>
<div id='meta_name' class='mb-2'>
 <label>Name</label>
 <%= text_field_tag 'opt[name]', '', {:placeholder => 'Metadata name (as written in Loom file)', :class => 'form-control'} %>
</div>
<div id='input_method_1' class='input_method_container'>
  <div class='float-right'>
    <span id='test_content' class='text-info italic pointer'>Fill with test metadata</span>
  </div>
 <label>Content</label>
  <%= text_area_tag 'opt[content]', "", {:placeholder => '', :style => 'width:100%', :rows => 12} %>
  <button id='preview_btn' class='btn btn-primary mt-3 mb-3' type='button' disabled='disabled'>Preview</button>
  <div id='metadata_warnings'>    
  </div>
  <div id='preparsing_clipboard'>
  </div>
</div>
<div id='input_method_2' class='input_method_container hidden'>
  <%= render :partial => 'upload_input_file' %>
</div>

<%= javascript_tag do %>
var delimiter_values = <%= raw delimiter_values.to_json %>
var h_input_examples = <%= raw @h_json.to_json %>; <%# raw @h_input_examples.to_json %>
var h_json = <%= raw @h_json.to_json %>

function check_form(){
 if (($("#opt_input_type_id").val() == 2  || $("#opt_name").val().replace(/\s/, '') != '') && $("#opt_content").val().replace(/\s/, '') != ''){
  $("#preview_btn").prop("disabled", false)
 }else{
  $("#preview_btn").prop("disabled", true)
 }
}

$("#test_content").click(function(){
$("#opt_content").val($("#opt_content").attr("placeholder"))
check_form()
})

$("#opt_name").keyup(function(e){
check_form()
})

$("#opt_content").keyup(function(e){
check_form()
})

$("#preview_btn").click(function(){
 $("#preview_btn").prop("disabled", true)
 var p = [
  {name : 'delimiter', value : $("#opt_delimiter").val()},
  {name : 'input_type_id', value : $("#opt_input_type_id").val()},
  {name : 'name', value : $("#opt_name").val()},
  {name : 'content', value : $("#opt_content").val()},
  {name : 'version_id', value : $("#opt_version_id").val()}
 ]
 var url = "<%= prepare_metadata_project_path(:key => @project.key) %>"
 var h_opt = {}
 refresh_post(null, url, p, 'post', h_opt)
})


$(".input_method_btn").click(function(){
 var t = this.id.split("_")[2]
 $("#opt_input_method_id").val(t)
 $(".input_method_container").addClass("hidden")
 $("#input_method_" + t).removeClass("hidden")
 $(".input_method_btn").addClass("btn-secondary")
 $(".input_method_btn").removeClass("btn-primary")
 $("#input_method_" + t + "_btn").addClass("btn-primary")
 $("#input_method_" + t + "_btn").removeClass("btn-secondary")
})

function upd_input_type(){
 //console.log(h_json['cells'])
 var fake_headers = {
   'cells' : ["Cell names", 'clustering_lambda', 'cell_type'],
   'genes' : ["Gene symbols/EnsemblIDs", 'level_expression_in_condition_lambda', 'has_feature_gamma']
 }
 var t = $("#opt_metadata_type_id").val();

 var placeholder_t = []
 if ($("#opt_input_type_id").val() == '2'){  
  //  placeholder_t.push((t == '1') ? fake_headers['cells'].join("\t") : fake_headers['genes'].join("\t"))
  if (t == '2'){
   placeholder_t.push(fake_headers['genes'].join("\t"))
   for(var i=0; i<5; i++){
    placeholder_t.push(h_json['genes'][i] + "\t1\tAdipocyte")
   }
   for(var i=5; i<h_json['genes'].length; i++){
    placeholder_t.push(h_json['genes'][i] + "\t1\tCardiomyocyte")
   }
  }else{
   placeholder_t.push(fake_headers['cells'].join("\t"))
   for(var i=0; i<h_json['cells'].length; i++){
    placeholder_t.push(h_json['cells'][i] + "\t" + Math.round(Math.random(10)*10) + "\t" + Math.round(Math.random(1)))					   
   }
  }
 }else{ 
   placeholder_t = (t == '1') ? h_json['cells'] : h_json['genes'];
  }
 console.log($("#opt_delimiter").val())
  $("#opt_content").attr("placeholder", placeholder_t.join(delimiter_values[parseInt($("#opt_delimiter").val())]))
  check_form()
}

$(".metadata_type_btn").click(function(){
 var t = this.id.split("_")[2]
 $("#opt_metadata_type_id").val(t)
 $(".metadata_type_btn").addClass("btn-secondary")
 $(".metadata_type_btn").removeClass("btn-primary")
 $("#metadata_type_" + t + "_btn").addClass("btn-primary")
 $("#metadata_type_" + t + "_btn").removeClass("btn-secondary")
 upd_input_type()
})

$(".input_type_btn").click(function(){
 var t = this.id.split("_")[2]
 $("#opt_input_type_id").val(t)
 $(".input_type_btn").addClass("btn-secondary")
 $(".input_type_btn").removeClass("btn-primary")
 $("#input_type_" + t + "_btn").addClass("btn-primary")
 $("#input_type_" + t + "_btn").removeClass("btn-secondary")
 if (t == '2'){
  $("#opt_delimiter").val("0")
  $("#opt_delimiter").prop("disabled", true)
  $("#opt_name").prop("disabled", true)
  $("#opt_name").attr("placeholder", "Metadata names have to be set in the header of the file")
 }else{
  $("#opt_delimiter").val("0")
  $("#opt_delimiter").prop("disabled", false)
  $("#opt_name").prop("disabled", false)
  $("#opt_name").attr("placeholder", "Metadata name (as written in LOOM file)")					    
 }
 upd_input_type()
})

$("#opt_delimiter").change(function(){
 upd_input_type()
})

 upd_input_type()

      var input = document.getElementById('opt_content');

      input.addEventListener('keydown', function(e) {
        if (e.key === 'Tab') {
          e.preventDefault(); // Prevent the default behavior (moving focus)
          
          // Insert a tab character at the current caret position
          var start = this.selectionStart;
          var end = this.selectionEnd;
          var value = this.value;

          this.value = value.substring(0, start) + '\t' + value.substring(end);
          
          // Move the caret to the right of the inserted tab
          this.setSelectionRange(start + 1, start + 1);
        }
      });

<% end %>
