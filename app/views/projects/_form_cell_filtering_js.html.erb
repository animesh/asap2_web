/*function convert_short_endians_to_array(se){
 var a = []
 var bytes = null
 for (var i=0; i<se.length/2; i++){
  bytes = new Uint8Array([se[i*2], se[i*2+1], 0, 0]);
  a.push(new Uint32Array(bytes.buffer)[0]);
 }
 return a
}
*/

function Graph(config){
  this.config = config;
  this.data = [];
  this.cutoff = {min:null,max:null,adjust:false};
//  this.json = convert_short_endians_to_array(Base64.decode(this.config.json));
  this.json = this.config.json
  this.selectInData = [];
  this.selectOutData = [];
  this.selectData = [];
  this.sorted= false;
  this.defaultConf = { 
     modeBarButtonsToRemove: [
       "hoverClosest3d","sendDataToCloud", "toggleSpikelines", 
       "hoverClosestCartesian", "hoverCompareCartesian"], 
     displaylogo: false,
     displayModeBar: true ,
     showLink: false,
     doubleClick: 'reset+autosize',
     showTips: false 
  };
  this.layout  = {		
     margin : {t : 100},
     title :"Filter on " + this.config.y_label,
     xaxis : {
	title : this.config.x_label,
        type : this.config.xaxis.type},
     yaxis : {
        title	: this.config.y_label,
        type	: this.config.yaxis.type,
	range	: this.config.yaxis.range,
	ticksuffix : this.config.yaxis.ticksuffix,
	showspikes : true,
	spikemode  : "across+marker",
	spikesnap		:"cursor",
	spikedash		:"solid",
        spikethickness	:2,
        spikecolor		:"#dd6633"
     },
     showlegend		:false,
     hovermode		:"closest",
     hoverdistance	:20,
     
     shapes : [{
      type : "line",
      layer : "above",
      x0 : 1,
      x1 : 1,
      y0 : 1,
      y1 : 1,
      line : {color:"dd6633",width:2}
     }] 
  };
  this.getInColor = function(){
   return document.getElementById("color_in").value;
  };
  this.getOutColor = function(){
   return document.getElementById("color_out").value;
  };
  this.init = function(){
   t0 = performance.now();
   var o = this;
  // console.log(o.json)
   // Plotly.d3.json(o.config.file, function(err, json) {     
   // o.json = json;
   if(o.config.datamodel.cutoff.max=="max"){
     o.cutoff.max = Math.max(...o.json[o.config.y_json]);
   }else{
     if(o.adjust(Math.max(...o.json[o.config.y_json]),"max")<o.config.datamodel.cutoff.max){
       o.cutoff.max = o.adjust(Math.max(...o.json[o.config.y_json]),"max");
     }else{
       o.cutoff.max = o.config.datamodel.cutoff.max;
     }
   }
   if(o.config.datamodel.cutoff.min=="min"){
     o.cutoff.min=Math.min(...o.json[o.config.y_json]);
   }else{
     if(o.adjust(Math.min(...o.json[o.config.y_json]),"min")>o.config.datamodel.cutoff.min){
       o.cutoff.min=o.adjust(Math.min(...o.json[o.config.y_json]),"min");
     }else{
       o.cutoff.min=o.config.datamodel.cutoff.min;
     }
   }
   document.getElementById(o.config.target.id + "_value").value = (o.config.datamodel.cutoff.type==="min")?o.cutoff.min:o.cutoff.max;
if(this.config.log)console.log(this.config.target.id + " init(): " + (t1 - t0) + " ms");
  // document.getElementsByName(o.config.target.id + "_value")[0].value =  (o.config.datamodel.cutoff.type==="min")?o.cutoff.min:o.cutoff.max;
   //o.config.target.nextSibling.nextSibling.firstElementChild.value= (o.config.datamodel.cutoff.type==="min")?o.cutoff.min:o.cutoff.max;
   //});
   t1 = performance.now();
   if(this.config.log)console.log(this.config.target.id + " init(): " + (t1 - t0) + " ms");
  };
  this.prepare = function(){
    t0 = performance.now();
    var c = this.config;
    if(c.sort && !this.sorted){this.sort()};
      var x1=[],y1=[],x2=[],y2=[],text1=[],text2=[],custom1=[],custom2=[];
      var totalCell = this.json[c.y_json].length;
      for(var i = 0; i < totalCell; i++){
        value = parseFloat(this.json[c.y_json][i]);
	if(value>=this.cutoff.min&&value<=this.cutoff.max){
          y1.push(value);
          text1.push("Cutoff value: " + value + "<br>"); //Filtered out " + this.getFilteredCount(value) + "</span><br>Click to set!");
	  if(c.x_json!="cells"){
	    x1.push(this.json[c.x_json][i]);
  	    custom1.push(this.json[c.ref_json][i]);
          }else{
            x1.push(i+1);
            custom1.push(this.json[c.x_json][i]);
          }								
        }else{
          y2.push(value);
          text2.push("Cutoff value: " + value + "<br>"); //Filtered out " + this.getFilteredCount(value) + "</span><br>Click to set!");
          if(c.x_json!="cells"){
	    x2.push(this.json[c.x_json][i]);
            custom2.push(this.json[c.ref_json][i]);				         }else{
            x2.push(i+1);
            custom2.push(this.json[c.x_json][i]);
          }
        }
      };
      
      /* if(x2.length>0){
        if(this.config.datamodel.cutoff.type==="min"){
          text2.unshift("Cutoff value: " + y1[y1.length-1] + "<br>Filtered out " + this.getFilteredCount(this.cutoff.min) + "</span>");
          y2.unshift(y1[y1.length-1]), x2.unshift(x1[x1.length-1]), custom2.unshift(custom1[custom1.length]);
	}else{
          text2.push("Cutoff value: " + y1[y1.length-1] + "<br>Filtered out " + this.getFilteredCount(this.cutoff.max) + "</span>");
          y2.push(y1[y1.length-1]), x2.push(x1[x1.length-1]), custom2.push(custom1[custom1.length]);	
        }									     
      }
      */
      this.data = [this.getTrace(x1,y1,text1,custom1,this.getInColor()),this.getTrace(x2,y2,text2,custom2,this.getOutColor())];			
      t1 = performance.now();
      if(this.config.log)console.log(this.config.target.id + " prepare(): " + (t1 - t0) + " ms");
      this.draw();
   
    }; 
    this.draw = function(){
      this.calculateHorizontalLine();
      t0 = performance.now();
      Plotly.react(this.config.target, this.data, this.layout,this.defaultConf);
      $("#" + this.config.target_id + " .waiting").addClass("hidden");
      t1 = performance.now();
      if(this.config.log)console.log(this.config.target.id + " draw(): " + (t1 - t0) + " ms");
    };
    this.addSelectEvent = function(){
      var o = this;
      this.config.target.on("plotly_selected", function(eventData) {
        if(eventData==null||eventData.points.length==0){
          return;
	}
      for(i=0;i<eventData.points.length;i++){
        o.selectData.push(eventData.points[i].customdata);
      }
      o.selectOutData=o.selectData;
      updateResult();
      Plotly.restyle(o.config.target, {selectedpoints: [null]});
      //document.getElementById("group").style.display = "block";
    });
  };

  this.getDataLength = function(){
    var length = this.json[this.config.x_json].length;
    return length;
  };
  this.sort = function(){
    t0 = performance.now();
    var a = [];
    x = this.json[this.config.x_json];
    y = this.json[this.config.y_json];
    for(var i=0; i<x.length; i++){
      a.push([x[i],y[i]]);
    }
    a.sort((aa,bb)=> (parseFloat(aa[1])>parseFloat(bb[1]))?-1:(parseFloat(aa[1])<parseFloat(bb[1]))?1:0 );
    for(var i=0;i<a.length;i++){
      x[i]=a[i][0];
      y[i]=a[i][1];
    }
    this.sorted = true;
    t1 = performance.now();
		    if(this.config.log)console.log(this.config.target.id + " sort(): " + (t1 - t0) + " ms");
  };
  this.getTrace	= function(x, y, text, customData, color){
    t0 = performance.now();
    var aColor=[];
    for(var i=0;i<y.length;i++){
      aColor[i]=color;
    }
   t1 = performance.now();
   if(this.config.log)console.log(this.config.target.id + " getTrace(): " + (t1 - t0) + " ms");
    return {
      type: "scattergl",
      opacity:0.9,
      mode: this.config.mode,
      marker: {color:aColor, size:this.config.size},
      line: {width:2,color:color},
      customdata:customData,
      x: x,
      y: y,
      text: text,
      hoverinfo: "text",
      hoverlabel: {bgcolor:"#eeeeee", font:{size:10}}
    };
  };

  this.getFilteredCount	= function(cutoffValue){
    t0 = performance.now();
    var countInLimits = 0;
    var y = this.json[this.config.y_json];
    var mi=cutoffValue,ma=cutoffValue;
    var cu = this.config.datamodel.cutoff;
    if(cu.type==="min"){
      ma = this.cutoff.max;
    }else{
      mi = this.cutoff.min;
    }
    for(var i=0;i<y.length;i++){
      if((parseFloat(y[i])<=mi&&cu.type==="min")||(parseFloat(y[i])>=ma&&cu.type==="max")){
        countInLimits++;
      }
    }
    t1 = performance.now();
    if(this.config.log)console.log(this.config.target.id + " getFilteredCount(): " + (t1 - t0) + " ms");
    return countInLimits;
  };
  this.colorFilteredCells = function(out, kept){
    t0 = performance.now();
    var d = this.data;
    for(j=0;j<2;j++){
      color=[];
      for(i=0;i<d[j].customdata.length;i++){
        color[i]=j==0?this.getInColor():this.getOutColor();
	if(out.includes(d[j].customdata[i])){
          color[i]=this.getOutColor();
        }
        if(kept.includes(d[j].customdata[i])){
          color[i]=this.getInColor();
        }
      }
     // console.log("i -> " + i + " j -> " + j + " --> " +  color)
      var update = {marker:{color:color,size:this.config.size}};
   
      Plotly.restyle(this.config.target,update,[j]);
    }								
    t1 = performance.now();
    if(this.config.log)console.log(this.config.target.id + " colorFilteredCells(): " + (t1 - t0) + " ms");
  };
  this.calculateHorizontalLine	= function(){
    t0 = performance.now();
    var s = this.layout.shapes[0];
    var value = 0;
    if(this.config.datamodel.cutoff.type=="min"){
      value = this.cutoff.min;
    }else{
      value = this.cutoff.max;
    }
    s.y0=value;
    s.y1=value;
    if(this.config.target.data!=null){
      s.x0=(this.config.xaxis.type==="log")?Math.pow(10,this.config.target.layout.xaxis.range[0]):this.config.target.layout.xaxis.range[0];
      s.x1=(this.config.xaxis.type==="log")?Math.pow(10,this.config.target.layout.xaxis.range[1]):this.config.target.layout.xaxis.range[1];
    }else{
      var a = this.data[0].x.concat(this.data[1].x);
      s.x0=(this.config.xaxis.type==="log")?Math.min(...a):0;
      s.x1=Math.max(...a);
    }
    t1 = performance.now();
    if(this.config.log)console.log(this.config.target.id + " calculateHorizontalLine(): " + (t1 - t0) + " ms");
  };
  this.adjust = function(number,type){
    if(type=="max"){
      //return Math.ceil(number)+5-Math.ceil(number)%5;
      return Math.ceil(number);
    }else{
      //return Math.floor(number)-Math.floor(number)%5;
      return Math.floor(number);
    }
  };
  this.filter = function(keep){
    t0 = performance.now();
    var d = this.data;
    var done = false;
    for(var k=0;k<2;k++){								
      for(var i=0;i<this.selectData.length;i++){
	d[k].marker.color[this.selectData[i].pointNumber]=keep?this.getInColor():this.getOutColor();
        done = true;
      }
    }
    t1 = performance.now();
    if(this.config.log)console.log(this.config.target.id + " filter(): " + (t1 - t0) + " ms");
    return done;
  };
  this.resetColors = function(){
    this.prepare();
  };
}

function changeCutoff(inputDom){
	var element = inputDom.parentNode.previousElementSibling;
	if(!verify(inputDom.value)||inputDom.value.length<1||(element!=cellreads&&element!=detectedGenes&&inputDom.value>100)||(element.layout.yaxis.type==="log"&&inputDom.value==0)){
		alert("Please modify the value: " + inputDom.value + "\nIt's not a valid number!");
		inputDom.value="";
		inputDom.focus();
		return;
	}	
	var points = [],customdata=[];
        if(element.data[0].customdata.length==0||element.data[0].customdata[0][0]==0){
        //	if(element.data[0].customdata[0][0]==0){
		customdata[0] = 0;
	}else{
		customdata[0]= 100;
	}	
	points[0] = {y:parseFloat(inputDom.value),customdata:customdata};
	var fullOpts = {bubbles: true, clientX: 0, clientY: 0};
	element.emit('plotly_click', {points: points, event: new MouseEvent('click', fullOpts)});
}

function verify(input){
	var chars="0123456789";
	var sp=".";
	var count=0;
	for(i=0;i<input.length;i++){
		if(!chars.includes(input.charAt(i))){
			if(sp==input.charAt(i)){
				count++;
			}else{
				return false;	
			}
		}		
	}
	if(count>1){
		return false;
	}
	return true;
}

function updateResult(){
	result = document.getElementById("result");
	filtered = document.getElementById("filtered");
	manually_filtered = document.getElementById("manually_filtered");	      
	filteredList = [];
//	filteredList_pos = [];	      
	keepList= [];
	selectedList=[];
//        selectedList_pos=[];

        // discard cells that are associated with selected categories of a given cell annotation
        h_manually_discarded = {}
	// init from existing manully filtered cells
        if ($("#attrs_manually_discarded_cols").val() != ''){
         var existing = JSON.parse($("#attrs_manually_discarded_cols").val())
         for(var i=0;i<existing.manually_discarded_cols.length;i++){
           h_manually_discarded[existing.manually_discarded_cols[i]]=1
         }
        }      
        $('#list_of_cats input[type="checkbox"]').each(function(){
         // If checkbox is checked
         if(this.checked){
           var t = this.id.split("_")
           t.shift()
           var cat = t.join("_")
         //  console.log(h_cats)
           for(var i=0; i<h_cats[cat].length;i++){
             h_manually_discarded[h_cats[cat][i]]=1
           }
          }
        })

       // from there we should at some point remove the selectedList and filteredList and only use positions (but means that we have to store the position in the selectOutData, customdata, and selectInData
        for(var i=0; i< o_depth.json.cells.length; i++){
          var cell_name = o_depth.json.cells[i]          
          if(h_manually_discarded[i]){
            selectedList.push(cell_name)
         //   selectedList_pos.push(i)
            filteredList.push(cell_name)
         //   filteredList_pos.push(i)
          }
        }
//console.log(selectedList_pos)

         for(var i=0;i<all.length;i++){
                all[i].prepare();
		if(all[i].selectInData.length!=0){
			for(j=0;j<all[i].selectInData.length;j++){
				if(!keepList.includes(all[i].selectInData[j])){
					keepList.push(all[i].selectInData[j]);
				}
			}
		}
		for(var k=0;k<2;k++){
			var d = all[i].data[k];
			for(j=0;j<d.customdata.length;j++){
				if(d.marker.color[j]==all[i].getOutColor() && !filteredList.includes(d.customdata[j]) && d.customdata[j]!=null && !keepList.includes(d.customdata[j])){
					filteredList.push(d.customdata[j]);
                                       // filteredList_pos.push(h_pos_by_name[d.customdata[j]])
				}
				   
			}
		}
		if(all[i].selectOutData.length!=0){
			for(j=0;j<all[i].selectOutData.length;j++){
				if(!filteredList.includes(all[i].selectOutData[j])&&!keepList.includes(all[i].selectOutData[j])){
					filteredList.push(all[i].selectOutData[j]);
                                      //  filteredList_pos.push(h_pos_by_name[all[i].selectOutData[j]])
				}
				if(!selectedList.includes(all[i].selectOutData[j])){
				    selectedList.push(all[i].selectOutData[j]);				    
				//    selectedList_pos.push(h_pos_by_name[all[i].selectOutData[j]]);
				}
/*                                if( h_manually_discarded[h_pos_by_name[all[i].selectOutData[j]]]){
                                   selectedList.push(all[i].selectOutData[j]);
                                    selectedList_pos.push(h_pos_by_name[all[i].selectOutData[j]]);
                                } 
*/
			}                       
		}
	}
	for(var i=0;i<all.length;i++){
	//	console.log("color plot: " + i)	
		all[i].colorFilteredCells(filteredList,keepList);
	}

//	function discardByCat(e){
//  alert(all)
//console.log("selectedList" + selectedList)
//console.log("filteredList" + filteredList)

//  selectedList_pos=Object.keys(h_manually_discarded).sort()
//  selectedList_pos= new_selectedList_pos
//  updateResult()

//}
		

	var totalCell = all[0].getDataLength();
        $("#attrs_discarded_cols").val(JSON.stringify({discarded_cols : filteredList})).trigger("change")
        $("#attrs_manually_discarded_cols").val(JSON.stringify({manually_discarded_cols : selectedList.sort()}))
	$("#attrs_nber_manually_discarded_cols").val(selectedList.length)		 
//	document.getElementsByName("attrs[discarded_cols]")[0].value=filteredList;
//	document.getElementsByName("attrs[manually_discarded_cols]")[0].value=selectedList;		
	filtered.innerHTML = "<span class=''>Discarded : " + filteredList.length + "</span>";
	manually_filtered.innerHTML = "<span class=''>Manually discarded : " + selectedList.length + "</span>";
	result.innerHTML = "<span class=''>Selected : " + (totalCell-filteredList.length + "</span>");
}

//console.log("declaration")

var h_float = <%= raw @h_float.to_json %>
var h_data = <%= raw (@h_data_json) ? @h_data_json : @h_data.to_json %>
var list_p = Object.keys(h_data)
console.log("original:")
console.log(h_data)
//uncompress
for (var i=0; i < list_p.length; i++){
 k = list_p[i]
 h_data[k].values = convert_short_endians_to_array(uncompress(h_data[k].values), h_float[k])
}
//console.log(h_data)

var o_depth={
			target		: document.getElementById("cellreads"),
			log : false,
			target_id : "cellreads",         
//			file		: "filter_03/depth.json",
                        json            : h_data.depth,
			x_json		: "cells",
			y_json		: "values",
			sort		: true,
			x_label		: "Cells",
			y_label		: "UMIs/Reads counts",
			mode		: "markers",
			size		: 4,
			xaxis		: { type : "log"},
			yaxis		: { type : "log"},
			datamodel	: { cutoff:{ min:1000, max:"max", type:"min"}},
			getValue	: function(cell){
								for(i=0;i<this.json[this.x_json].length;i++){
									if(cell===this.json[this.x_json][i]){
										return this.json[this.y_json][i];
									}
								}
							}
		};


var o_mito={
			target		: document.getElementById("mitochondrial"),
                        log : false,
                        target_id : "mitochondrial",
//			file		: "filter_03/mitochondrial_content.json",
	                json            : h_data.mito <%# raw @h_data[:mito] || '{values:null}' %>,								    
			x_json		: "depth",
			y_json		: "values",
			ref_json	: "cells",
			sort		: false,
			x_label		: "UMIs/Reads counts",
			y_label		: "Mitochondrial content",
			mode		: "markers",
			size		: 4,
			xaxis		: { type : "linear"},
			yaxis		: { type : "linear", ticksuffix:"%"},
			datamodel	: { cutoff:{ min:0, max:20, type:"max"}}
		};

var o_detected_genes={
			target		: document.getElementById("detectedGenes"),
   log : false,
                        target_id : "detectedGenes",
//			file		: "filter_03/detected_genes.json",
		        json            : h_data.detected_genes <%# raw @h_data[:detected_genes] || '{values:null}' %>,
			x_json		: "depth",
			y_json		: "values",
			ref_json	: "cells",
			sort		: false,
			x_label		: "UMIs/Reads counts",
			y_label		: "Detected Genes",
			mode		: "markers",
			size		: 4,
			xaxis		: { type : "linear"},
			yaxis		: { type : "linear"},
			datamodel	: { cutoff:{ min:1000, max:"max", type:"min"}}
		};
var o_protein_coding={
   log : false,
			target		: document.getElementById("proteinCoding"),
                        target_id : "proteinCoding",
//			file		: "filter_03/protein_coding_content.json",
                        json            : h_data.protein_coding <%# raw @h_data[:protein_coding] || 'null' %>,
			x_json		: "depth",
			y_json		: "values",
			ref_json	: "cells",
			sort		: false,
			x_label		: "UMIs/Reads counts",
			y_label		: "Protein Coding Fraction",
			mode		: "markers",
			size		: 4,
			xaxis		: { type : "linear"},
			yaxis		: { type : "linear", ticksuffix:"%"},
			datamodel	: { cutoff:{ min:80, max:100, type:"min"}}
		};

var o_ribo={
			target		: document.getElementById("ribosomal"),
   log : false,
                        target_id : "ribosomal",
//			file		: "filter_03/ribosomal_content.json",
                        json            : h_data.ribo <%# raw @h_data[:ribo] || '{values:null}' %>,
			x_json		: "depth",
			y_json		: "values",
			ref_json	: "cells",
			sort		: false,
			x_label		: "UMIs/Reads counts",
			y_label		: "Ribosomal Fraction",
			mode		: "markers",
			size		: 4,
			xaxis		: { type : "linear"},
			yaxis		: { type : "linear", ticksuffix:"%"},
			datamodel	: { cutoff:{ min:0, max:40, type:"max"}}
		};


console.log(h_data)

all =[];
//h_pos_by_name = {}
init();

function init(){

console.log("blaaaaaaaaaaaa")

console.log(<%= raw @h_data.keys.select{|k| @h_data[k]}.to_json %>)
 <% @h_data.keys.select{|k| @h_data[k]}.each do |k| %>
 // console.log("<%= k %>")
  o_<%= k.to_s %>.json.cells = [...Array(o_<%= k.to_s %>.json.values.length).keys()];
 <% end %>


 console.log("O_DEPTH_CELLS:")
 console.log(o_depth.json.cells)
/*
 if (o_depth && o_depth.json && o_depth.json.cells){
  var h_pos_by_name = {}
  for(var i=0; i< o_depth.json.cells.length; i++){
   h_pos_by_name[o_depth.json.cells[i]] = i
  }
 }
*/

// console.log(h_pos_by_name)
 <% @h_data.keys.select{|k| @h_data[k]}.each do |k| %>
  G_<%= k.to_s %> = new Graph(o_<%= k.to_s %>);
 <% end %>


        all = [<%= @h_data.keys.select{|k| @h_data[k]}.map{|k| "G_#{k}"}.join(", ") %>]									
//          all =[G_depth]  
        console.log(all)
	for(var i=0;i<all.length;i++){
		all[i].init();
	}	


	G_depth.getCellBasedYvalues = function(cells){
		var xValues = [];
		for(var i=0; i<cells.length; i++){
			var index = this.json[this.config.x_json].indexOf(cells[i]); 
			if(index>-1){
				xValues.push(this.json[this.config.y_json][index]);
			}else{
				console.log("Cell not found: [" + cells[i] + "]!!!!");
			}
		}
		return xValues;
	};	
	
	setTimeout( function(){
		for(var i=0;i<all.length;i++){
			if(all[i].config.ref_json){
				all[i].json[all[i].config.x_json] = G_depth.getCellBasedYvalues(all[i].json[all[i].config.ref_json]);
			}
			all[i].prepare();
			addListener(all[i]);
			all[i].draw();
			all[i].addSelectEvent();
		}
		updateResult();
	},500);

}

function addListener(node){
	node.config.target.on("plotly_click", function(eventData) {
		if(node.config.datamodel.cutoff.type==="max"){
			node.cutoff.max = eventData.points[0].y;
		}else{
			node.cutoff.min = eventData.points[0].y;
		}
		node.prepare();
		updateResult();
		var input = node.config.target.nextSibling.nextSibling.firstElementChild;
		input.value=eventData.points[0].y;
		document.getElementsByName(input.name)[0].value=eventData.points[0].y;
	});
};

function filter(keep){ 
	for(var i=0;i<all.length;i++){
		if(all[i].selectData.length>0){
			if(keep){
				all[i].selectInData=all[i].selectData;
			}else{
				all[i].selectOutData=all[i].selectData;
			}
			all[i].selectData=[];
		}
	}
	updateResult();
	for(var i=0;i<all.length;i++){
		all[i].draw();
	}
	closePopup(document.getElementById("close"));
}

function closePopup(target){
	if(target==document.getElementById("close")){
		document.getElementById("group").style.display = "none";
		for(var i=0;i<all.length;i++){
			Plotly.restyle(all[i].config.target, {selectedpoints: [null]});
		}
	}
}

function resetCheckboxes(){
 $('#list_of_cats input[type="checkbox"]').each(function(){
    $(this).prop("checked", false)     
 })
}

function resetFilters(){
        $("#attrs_manually_discarded_cols").val('');
        resetCheckboxes()
	for(var i=0;i<all.length;i++){
		all[i].selectInData=[];
		all[i].selectOutData=[];
		all[i].prepare();
	}
	updateResult();
	for(var i=0;i<all.length;i++){
		//all[i].draw();
	}
	return false;
}

function resetParams(){
	$("#attrs_manually_discarded_cols").val('');
        resetCheckboxes()
//        $("#annot_categories").addClass("hidden");
//	$("#annot_id").val(null);

        for(var i=0;i<all.length;i++){
                all[i].init();
        }
        updateResult();
	return false;
}


function sendValues(){
	var form = document.getElementById("form");
	form.submit();
}


