
function Graph(config){
        var w = $(window).width();
        var h = $(window).height();
	this.config 		= config;
  //      this.config.size = $("#dot_size").val();
  //      this.config.opacity = $("#dot_opacity").val();
	this.shown			= 0; //0 - default; 1 - custom groups; 2 - gene expression; 3 - clusters
	this.data			= [];
	this.json			= config.json;
	this.groupData		= [];
	this.defaultConf	= {		
                                    modeBarButtonsToRemove	: ["hoverClosest3d","sendDataToCloud", "toggleSpikelines", "hoverClosestCartesian", "hoverCompareCartesian", "toImage"],
                                    modeBarButtonsToAdd: [
                                     {
                                      name: 'Save PNG',
                                      icon: Plotly.Icons.camera,
                                      click: function(gd) {
                                      Plotly.downloadImage(gd, {format: 'png', height:400,width:800})
                                     }
                                    },
                                    {
                                     name: 'Save SVG',
                                     icon: Plotly.Icons.camera,
                                     click: function(gd) {
                                     Plotly.downloadImage(gd, {format: 'svg'})
                                    }
                                   }],

								displaylogo				: false,
								displayModeBar			: true,
								showLink: false,
								doubleClick: 'reset+autosize',
								showTips: false };
	this.layout			= {	
             height : h-150,
             // width: w-280,
             //            width : (($("#plot_options_window").length > 0) ? w-900 : w-300),
             width : (($("#plot_options_window").hasClass("hidden")) ? w-300 : w-900),
	margin			: {l: 0, r: -20, b: 0, t: 40},
								showlegend		:true,
								scene			: {
												camera		: { eye: { x: 1, y: 1, z: 1 }},
												aspectmode	: "data",
												xaxis		: {title:this.config.x_label,showspikes:false},
												yaxis		: {title:this.config.y_label,showspikes:false},
												zaxis		: {title:this.config.z_label,showspikes:false}
												}
							};
	this.init				= function(){
								var o = this;
						//		Plotly.d3.json(o.config.file, function(err, json) {
						//			o.json = json;
									o.prepare();
									o.config.target.style.visibility = "visible";
						//		});
							};
	this.prepare			= function(){
								var c = this.config;
								this.data = [this.getTrace(this.json[c.x_json],this.json[c.y_json],this.json[c.z_json],this.json[c.text],this.json[c.text],this.config.color,null)];								
								this.draw();
							};
	this.draw				= function(){
								t0 = performance.now();
								Plotly.react(this.config.target, this.data, this.layout,this.defaultConf);
								t1 = performance.now();
								console.log("2D Render took " + (t1 - t0) + " milliseconds.");
							};
	this.getTrace			= function(x, y, z, text, ids, color, name){
								return {
										type		: "scatter3d",
									 	mode		: this.config.mode,
									 	visible		: true,
								      	marker		: {color: color, size: (this.config.size),opacity:this.config.opacity},
								        name		: name,
										x			: x,
										y			: y,
										z			: z,
										text		: text,
										ids			: ids,
										showlegend	: (name!=null)?true:false,
										hoverinfo	: "none"	
									};
							};
	this.updateOpacity		= function(opacity){
								this.config.opacity = opacity;
								var update = {"marker.opacity":opacity};
								Plotly.restyle(this.config.target, update);
							};
	this.updateSize			= function(size){
								this.config.size = size;
								var update = {"marker.size":size};
								Plotly.restyle(this.config.target, update);
							};
        this.updatePlotWidth = function(width){
      //   console.log(width)
         this.layout.width = width
         this.draw()
        };
/*	this.addGeneExpression	= function(name, data){
          var rows = data.rows;
	  var o = this.config;
	  // Plotly.d3.json(file+".json", function(err, json) {
	  var geneExpression = rows;									
          var max = Math.max(geneExpression)
	  var update = {	marker: {size		:o.size, 
		blend		:true, 
		opacity		:o.opacity,
		color		:geneExpression,
		colorbar	:{ticks:"outside",thickness:10,tickfont:{size:8}},
		//colorscale	:"Hot"}
	        colorscale	:[[0,"rgb(5,5,5)"],[max,"rgb(255,5,5)"]]}
	};
	Plotly.restyle(o.target, update,0);
						//		});
	this.shown=2;
	};
*/
       this.addGeneExpression  = function(name, data){       
         var o = this.config;
         var update = {}
         var rows= data.rows

         if (rows.length == 0){
          update = {
             marker: {
               size : o.size,
   //            blend : true,
               opacity : o.opacity,
               color : "#0000FF"
             }
           }
         }else{
         if (rows.length > 1){
          var colors = []
          var max = []
          var min = []
          var diff = []
          for (var i=0; i<rows.length; i++){
//          max[i] = Math.max(...(rows[i]) ? rows[i] : [0])
//           min[i] = Math.min(...(rows[i]) ? rows[i] : [0])				       
             max[i] = (rows[i]) ? list_max(rows[i]) : 0
             min[i] = (rows[i]) ? list_min(rows[i]) : 0
           diff[i] = max[i] - min[i]
          }
          for (var i=0; i<rows[0].length; i++){
           var rgb = [((rows[0] && diff[0] > 0) ? 255 - Math.round((rows[0][i]-min[0]) * 250 / diff[0]) : 255),
            ((rows[1] && diff[1] > 0) ? 255 - Math.round((rows[1][i]-min[1]) * 250 / diff[1]) : 255),
            ((rows[2] && diff[2] > 0) ? 255 - Math.round((rows[2][i]-min[2]) * 250 / diff[2]) : 255)]

           var alpha = (rgb[0] >= 250 && rgb[1] >= 250 && rgb[2] >= 250) ? ",0" : ""
           colors.push("rgb(" + rgb.join(",") + alpha + ")")
          }
        //  console.log(colors)
          update = {
            marker: {
              size : o.size,
  //            blend : true,
              opacity : (alpha == '') ? o.opacity : null,
              color : colors
            }
          }
         }else{
          if ($("#opt_coloring_type").val()< 3){
          var geneExpression = rows[0]
       //   var max = Math.max(...geneExpression) //.sort(function(a, b){return a-b})[geneExpression.length-1]
	 var max = list_max(geneExpression)				     
          update = {
            marker: {
              size : o.size,
//              blend : true,
              opacity : o.opacity,
              color : geneExpression,
              colorbar : {xanchor:"right",x:1.1,ticks:"outside",thickness:10,tickfont:{size:8}},
              //colorscale : "Hot"
              colorscale : [[0,"rgb(230,230,230)"],[1,"rgb(255,5,5)"]]
            }
          }
          }else{
            var colors = []
            var palette = Plotly.d3.scale.category10().range();
            var h_cats = {}
            var c_i = 0
            for (var i=0; i<rows[0].length; i++){
            //  console.log(rows)
            //  console.log(i + ":" + c_i + ":" + (c_i % 10))
              if(!h_cats[rows[0][i]]){
                c_i += 1
                h_cats[rows[0][i]]=c_i
              }
              colors[i] = palette[h_cats[rows[0][i]] % 10]
            }
            update = {
             marker: {
              size : o.size,
              blend : true,
              opacity : o.opacity,
              color : colors
             }
            }

/*            var colors = []
            var palette = Plotly.d3.scale.category10().range();
            var h_cats = {}
            var c_i = 0
            for (var i=0; i<rows[0].length; i++){
              colors[i] = palette[c_i % 10]
              if(!h_cats[rows[0][i]]){
                c_i += 1
                h_cats[rows[0][i]]=1
              }
            }
            update = {
             marker: {
              size : o.size,
//              blend : true,
              opacity : o.opacity,
              color : colors
             }
            }
*/
           }
          }

         }

         Plotly.restyle(o.target, update,0);
         // this.shown=2;
        };

	this.clearColors		= function(clean){
								var update = {marker : {color:this.config.color, size:this.config.size, blend:true, opacity:this.config.opacity}};
								if(clean){
									Plotly.restyle(this.config.target, update,0);
								}
							};
	this.addClusters		= function(name, file){
								var o = this.config; 
								Plotly.d3.json(file+".json", function(err, json) {
									var colors = palette("mpn65",json[o.c_list].length);
									var cScale = [];
									var tickvals = [];
									var ticktext = [];
									for(c=0;c<colors.length;c++){
										var r = parseInt(colors[c].slice(0, 2), 16),
								        g = parseInt(colors[c].slice(2, 4), 16),
								        b = parseInt(colors[c].slice(4, 6), 16);
										var a = c/colors.length;
										var a1 = (c+1)/colors.length;
										cScale.push([a,"rgb("+r+","+g+","+b+")"]);
										cScale.push([a1,"rgb("+r+","+g+","+b+")"]);
										tickvals.push(c);
										tickvals.push((c+c+1)/2);
										ticktext.push(json[o.c_list][c]);		
										ticktext.push("");
									}									
									var update = {	marker: {size			:o.size, 
															blend			:true, 
															opacity			:o.opacity,
															cauto			:false,
															cmin			:-0.5,
															cmax			:colors.length-0.5,
															color			:json[o.c_value],
															autocolorscale	:false,
															showscale		:true,
															colorscale		:cScale,
															colorbar		: {
																			ticks		:"",
																			thickness	:10,
																			tickmode	:"array",
																			ticktext	:ticktext,
																			tickvals	:tickvals,
																			tickfont	:{size:8}
																			}
															}
									};
									Plotly.restyle(o.target, update,0);
									list = document.getElementsByClassName("cbaxis crisp");									
									for(i=0;i<colors.length;i++){
										var text = json[o.c_list][i];
										if(text.length>18){
											text = text.substring(0,14)+"...";	
										}
										list[0].childNodes[i*2].childNodes[0].innerHTML="";
										list[0].childNodes[i*2].childNodes[0].innerHTML="<title>"+json[o.c_list][i]+"</title>"+text;
										list[0].childNodes[i*2].childNodes[0].setAttribute("style",list[0].childNodes[i*2].childNodes[0].attributes["style"].value + "pointer-events:auto;cursor:pointer;");
									}
								});
								this.shown=3;
							};
}

// <%= @cmd %>
 var json_data = <%= raw @h_json_data %>
//var all_json_data = <%# raw @h_json_data %>
//var json_data = (all_json_data['list_meta'] && all_json_data['list_meta'][0]) ? all_json_data['list_meta'][0] : {};


var conf3D = {
		target		: document.getElementById("dr_plot"),
		//file		: "224k_cells.json",
		//file		: "91cells.json",
		file		: "74689cells.json",
                json            : json_data.values,										    
		x_json		: 0,
		y_json		: 1,
		z_json		: 2,
		text		: "text",
		x_label		: "PC1",
		y_label		: "PC2",
		z_label		: "PC3",
		c_label		: "label",
		c_list		: "clusters",
		c_value		: "values",
		mode		: "markers",
		color		: "#0000ff" ,
                size            : (($("#dot_size").length > 0) ? $("#dot_size").val() : <%= session[:dr_params][@project.id][:dot_size] %>),
                opacity         : (($("#dot_opacity").length > 0) ? $("#dot_opacity").val() : <%= session[:dr_params][@project.id][:dot_opacity] %>)
	};

plotly_graph = null;
//loadColoringSelection();
init();

function init(){
	plotly_graph = new Graph(conf3D);
	plotly_graph.init();
}


function loadColoringSelection(){
	Plotly.d3.json("geneList.json", function(err, json) {
		json.forEach(function(gene){
			var option = document.createElement("option");
			option.value=gene.id;
			option.innerHTML = gene.label;
			document.getElementById("optgroup2").appendChild(option);
		});
	});
	Plotly.d3.json("clusterGroups.json", function(err, json) {
		json.forEach(function(cluster){
			var option = document.createElement("option");
			option.value=cluster.cluster_id;
			option.innerHTML = cluster.cluster_name;
			document.getElementById("optgroup1").appendChild(option);
		});
	});	
}


function coloring(colorType){
	//console.log(colorType.name + ": " +colorType.value);
	if(colorType.value==0){
		plotly_graph.clearColors(true);
		return;
	}

	if(colorType.selectedOptions[0].parentNode.id=="optgroup2"){
		if(plotly_graph.shown==3){
			plotly_graph.clearColors(false);
		}
		plotly_graph.addGeneExpression(colorType.name, colorType.value);	
	}
	
	if(colorType.selectedOptions[0].parentNode.id=="optgroup1"){
		if(plotly_graph.shown==2){
			plotly_graph.clearColors(false);
		}
		plotly_graph.addClusters(colorType.name, colorType.value);	
	}
}



