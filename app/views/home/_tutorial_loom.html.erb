<p>
In this tutorial we will show you how to use the .loom files that are generated by ASAP.
</p>

<hr/>

<h4 class="sm" id="sm-0">What is a Loom file (.loom extension) ?</h4>

<p>
In ASAP we chose to store all the input and output data in <a href="http://loompy.org/">Loom files</a>.<br/>
This format is very convenient for many reasons, and even more for large scale data storage, such as single-cell data experiments:
<ul>
<li>All matrix/vectors/metadata datasets can be stored in a unique .loom file (see Figure 1)</li>
<li>Matrices can be compressed and chunked, which allow to load into memory only part/chunks of the matrix in O(1). This is very efficient and allows for out-of-RAM computation, loading the matrix part by part.</li>
<li>Most methods and tools (Seurat, scanpy, SingleCellExperiment, <a href="http://scope.aertslab.org/">Scope</a>, ...) are able to 1) directly load .loom files or 2) to convert loom files in a specific object that can further be processed in the respective pipeline.</li>
<li>Many atlases (<a href="https://data.humancellatlas.org/">Human Cell Atlas</a>, <a href="https://flycellatlas.org/">Fly Cell Atlas</a>, ... directly provide datasets as .loom files</li>
</ul>
</p>

<%= image_tag 'tuto_4_001.png', {class:"tuto-image", style:'width:70%'} %>

<hr/>

<h4 class="sm" id="sm-0">What types of .loom files are stored in ASAP ? How many are there in my project ?</h4>

<p>
The main limitation (currently) is that .loom files handle only <b>ONE</b> fixed dimension for matrices (in terms of nb of cells/genes).<br/>
This means that if you filter your main matrix (gene or cell filtering), you will have to create a <b>NEW</b> .loom file with the new dimensions.<br/>
That is the reason why, in the same project, a user can have multiple .loom files available to download (one for each matrix dimension).<br/>
For example, if you uploaded a count matrix of 10000 cells x 30000 genes, that you performed a cell filtering (keeping only 8000 cells) and further a gene filtering (keeping only 2000 genes), then you will end up with 3 matrix dimensions, and thus 3 .loom files:
<ul>
<li>A .loom file (Loom1) with dimension 10000x30000 [Raw dataset]</li>
<li>A .loom file (Loom2) with dimension 8000x30000 [Cell filtering dataset]</li>
<li>A .loom file (Loom3) with dimension 8000x2000 [Gene + Cell filtering dataset]</li>
</ul>
Of course, any combination of filtering that the user will perform will result in a new .loom file (again, one loom per dimension of the main matrix).<br/>
This is important to understand, because, in our example, if a clustering is performed on the Loom3 dataset, it will only be stored in the Loom3 .loom file, not in Loom1 nor Loom2.<br/>
However, all the metadata that were present in a .loom file prior filtering, will be kept in the filtered .loom file.
</p>

<p class='alert alert-info'>
<i class='fas fa-info-circle'></i> <b>Of note</b><br />
Currently ASAP generates Loom v3 files, so if you use loompy/loomR to load the .loom into your workspace, check that you have the latest version (that can handle Loom v3)
</p>

<hr/>

<h4 class="sm" id="sm-0">How is stored the data in my Loom file ?</h4>
<p>
ASAP follows the rules of the <a href="http://linnarssonlab.org/loompy/format/index.html">.loom format specs</a>, so we invite the reader to check this website for more information (also see Figure 1).<br />
In brief:
<ul>
<li>The main raw count matrix is stored at the root of the .loom file: <b>/matrix</b></li>
<li>The normalized/scaled/corrected matrices are stored in the <b>/layers</b> group (a group can be seen as a folder) in the .loom file: <b>/layers/norm_matrix</b></li>
<li>The matadata are stored in the <b>/row_attrs</b> or <b>/col_attrs</b> groups, if they are metadata for the genes or the cells, respecticely.</li>
</ul>
</p>

<div class='alert alert-info'>
<i class='fas fa-info-circle'></i> <b>Of note</b><br />
<ul>
<li>What we call metadata are the "attributes" of the cells or the genes. For example, "gene names" and "is_variable" are metadata of the genes, and "cell name" or "cluster_seurat" are metadata of the cells.</li>
<li>We can also store full tables as metadata. For example we store the DE results as a "nbgenes X 5 columns" metadata of the genes. The five columns are "log Fold-Change", "p-value", "FDR", "Average expression in Group 1", "Average expression in Group 2".</li>
</ul>
</div>

<hr/>

<h4 class="sm" id="sm-0">How can I use my .loom file and retrieve information from it ?</h4>

<p>
Retrieving information from the .loom file requires writing some lines of code. Since it is a HDF5 file, any programming language can be used, but for simplicity we recommend using <a href="https://satijalab.org/loomR/loomR_tutorial.html">loomR</a> (R language) or <a href="http://linnarssonlab.org/loompy/installation/index.html">loompy</a> (Python language).<br/>
Here follows an example in R and Python to retrieve clustering results stored in the "/col_attrs/cluster_seurat" metadata:
</p>

<h5 class="sm" id="sm-0">R script for loading .loom file</h5>
<pre class="r-highlight">

# Load the library
require(loomR)

# Connect to the file
ds <- connect(filename = "my_loom.loom", mode = "r") # r for read-only and r+ for read/write

# Note: You may encounter the following error:
# Error in validateLoom(object = self) :
#   There can only be 5 groups in the loom file: 'row_attrs', 'col_attrs', 'layers', 'row_graphs', 'col_graphs'
# If this is the case, it is because loomR is not yet applicable to Loom v3 standards (that is generated in ASAP). As of today, this is the case (2020.04.14). Maybe later you will simply need to update loomR version.
# You will need to use the option: skip.validate = T
# e.g.
# ds <- connect(filename = "my_loom.loom", mode = "r", skip.validate = T)

# Retrieve the data and put in variable clusters
clusters = ds[["col_attrs/cluster_seurat"]]

# Close the file handle
ds$close_all()

</pre>

<h5 class="sm" id="sm-0">Python script for loading .loom file</h5>
<pre class="python-highlight">

# Import the package
import loompy

# Connect to the file
ds = loompy.connect("my_loom.loom", "r") # r for read-only and r+ for read/write

# Retrieve the data and put in variable clusters
clusters = ds.col_attrs["cluster_seurat"]

# Close the file handle
ds.close()

</pre>


